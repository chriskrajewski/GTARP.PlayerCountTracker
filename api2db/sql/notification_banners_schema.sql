-- Notification Banners Table Schema
-- This table stores all notification banners for the application

CREATE TABLE public.notification_banners (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  
  -- Banner Content
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  type TEXT NOT NULL DEFAULT 'info' CHECK (type IN ('info', 'warning', 'success', 'announcement', 'urgent')),
  
  -- Priority and Display Settings
  priority INTEGER NOT NULL DEFAULT 1, -- Higher numbers = higher priority
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  is_dismissible BOOLEAN NOT NULL DEFAULT TRUE,
  
  -- Scheduling
  start_date TIMESTAMP WITH TIME ZONE NULL,
  end_date TIMESTAMP WITH TIME ZONE NULL,
  
  -- Action Button (Optional)
  action_text TEXT NULL,
  action_url TEXT NULL,
  action_target TEXT NULL DEFAULT '_self' CHECK (action_target IN ('_self', '_blank')),
  
  -- Visual Customization
  background_color TEXT NULL,
  text_color TEXT NULL,
  border_color TEXT NULL,
  
  -- Metadata
  created_by TEXT NULL,
  view_count BIGINT DEFAULT 0,
  dismiss_count BIGINT DEFAULT 0,
  
  CONSTRAINT notification_banners_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Indexes for performance
CREATE INDEX notification_banners_active_idx ON public.notification_banners (is_active, priority DESC, start_date, end_date) WHERE is_active = TRUE;
CREATE INDEX notification_banners_priority_idx ON public.notification_banners (priority DESC);
CREATE INDEX notification_banners_type_idx ON public.notification_banners (type);
CREATE INDEX notification_banners_dates_idx ON public.notification_banners (start_date, end_date);

-- Update trigger for updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_notification_banners_updated_at 
    BEFORE UPDATE ON public.notification_banners 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Table for tracking individual user dismissals
CREATE TABLE public.notification_banner_dismissals (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  banner_id BIGINT NOT NULL REFERENCES public.notification_banners(id) ON DELETE CASCADE,
  user_id TEXT NOT NULL, -- From localStorage or session
  dismissed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  
  CONSTRAINT notification_banner_dismissals_pkey PRIMARY KEY (id),
  CONSTRAINT notification_banner_dismissals_unique UNIQUE (banner_id, user_id)
) TABLESPACE pg_default;

-- Index for user dismissals lookup
CREATE INDEX notification_banner_dismissals_user_idx ON public.notification_banner_dismissals (user_id, banner_id);
CREATE INDEX notification_banner_dismissals_banner_idx ON public.notification_banner_dismissals (banner_id);

-- Row Level Security (Optional - for admin access control)
ALTER TABLE public.notification_banners ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notification_banner_dismissals ENABLE ROW LEVEL SECURITY;

-- Policies for public read access
CREATE POLICY "Allow public read on active banners" ON public.notification_banners
  FOR SELECT USING (
    is_active = TRUE 
    AND (start_date IS NULL OR start_date <= NOW()) 
    AND (end_date IS NULL OR end_date >= NOW())
  );

CREATE POLICY "Allow dismissal tracking" ON public.notification_banner_dismissals
  FOR ALL USING (TRUE);

-- Sample data for testing
INSERT INTO public.notification_banners (
  title, 
  message, 
  type, 
  priority, 
  is_active, 
  is_dismissible,
  action_text,
  action_url,
  start_date
) VALUES 
(
  'Welcome to GTA RP Player Tracker!', 
  'Track player counts, stream data, and server statistics in real-time. New features are being added regularly!',
  'info',
  1,
  TRUE,
  TRUE,
  'Learn More',
  '/changelog',
  NOW()
),
(
  'System Maintenance Notice',
  'Scheduled maintenance window: Saturday 2AM-4AM EST. Some features may be temporarily unavailable.',
  'warning',
  5,
  FALSE, -- Set to TRUE when needed
  TRUE,
  NULL,
  NULL,
  NULL
);
